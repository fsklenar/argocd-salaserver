apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-crashloopbackoff-pods
  namespace: monitoring # Change this to the namespace you want to target
spec:
  schedule: "*/10 * * * *" # Runs every 10 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: cleanup-sa # Use a dedicated ServiceAccount with permissions
          containers:
            - name: kubectl-pod-cleaner
              image: bitnamilegacy/kubectl:1.33.4
              command: ["/bin/sh", "-c"]
              args:
                - |
                  # Find and delete pods in CrashLoopBackOff state
                  # The 'grep -v "Terminating"' is to avoid trying to delete pods that are already shutting down
                  PODS_TO_DELETE=$(kubectl get pods --field-selector=status.phase=Running -o json | \
                    jq -r '.items[] | select(.status.containerStatuses[]?.state.waiting.reason == "CrashLoopBackOff") | .metadata.name')

                  if [ -z "$PODS_TO_DELETE" ]; then
                    echo "No CrashLoopBackOff pods found."
                  else
                    echo "Deleting the following pods in CrashLoopBackOff: $PODS_TO_DELETE"
                    # Use --force --grace-period=0 for immediate deletion. Omit for standard deletion.
                    # Standard deletion: kubectl delete pod $PODS_TO_DELETE
                    kubectl delete pod $PODS_TO_DELETE
                  fi
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cleanup-sa
  namespace: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-deleter-role
  namespace: monitoring
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cleanup-sa-binding
  namespace: monitoring
subjects:
  - kind: ServiceAccount
    name: cleanup-sa
    namespace: monitoring
roleRef:
  kind: Role
  name: pod-deleter-role
  apiGroup: rbac.authorization.k8s.io
